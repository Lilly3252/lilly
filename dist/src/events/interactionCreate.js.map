{"version":3,"file":"interactionCreate.js","sourceRoot":"./src/","sources":["src/events/interactionCreate.ts"],"names":[],"mappings":"AAKA,MAAM,CAAC,MAAM,IAAI,GAAkB,mBAAmB,CAAC;AACvD,MAAM,CAAC,MAAM,IAAI,GAAkB,KAAK,CAAA;AAExC,MAAM,CAAC,MAAM,GAAG,GAAiB,KAAK,EAAE,WAAwB,EAAiB,EAAE;IAC/E,IAAI,WAAW,CAAC,kBAAkB,EAAE,IAAI,WAAW,CAAC,oBAAoB,EAAE,EAAE;QACxE,OAAO,KAAK,aAAa,CAAC,WAAW,CAAC,CAAC;KAC1C;IACD,IAAI,WAAW,CAAC,cAAc,EAAE,EAAE;QAC9B,OAAO,KAAK,kBAAkB,CAAC,WAAW,CAAC,CAAC;KAC/C;IAED,IAAI,WAAW,CAAC,aAAa,EAAE,EAAE;QAC7B,OAAO,KAAK,WAAW,CAAC,WAAW,CAAC,CAAC;KACxC;IACD,IAAG,WAAW,CAAC,QAAQ,EAAE,EAAC;QACtB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;KAC3B;AACL,CAAC,CAAC;AACF,MAAM,aAAa,GAAG,KAAK,EAAE,WAAwE,EAAiB,EAAE;IACpH,IAAI;QACA,IAAI,WAAW,CAAC,kBAAkB,EAAE,EAAE;YAClC,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAA6B,CAAC;YACrG,IAAI,OAAO,EAAE;gBACT,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;aAClC;SACJ;QACD,IAAI,WAAW,CAAC,oBAAoB,EAAE,EAAE;YACpC,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAA+B,CAAC;YACvG,IAAI,OAAO,EAAE;gBACT,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;aAClC;SACJ;KACJ;IAAC,OAAO,GAAY,EAAE;QACnB,OAAO,KAAK,WAAW,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;KAChE;AACL,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,KAAK,EAAE,WAAoC,EAAiB,EAAE;IACrF,IAAI;QACA,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAA6B,CAAC;QACrG,IAAI,OAAO,EAAE;YACT,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SAClC;KACJ;IAAC,OAAO,GAAY,EAAE;QACnB,OAAO,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;KACjC;AACL,CAAC,CAAA;AACD,MAAM,WAAW,GAAG,KAAK,EAAE,WAAmC,EAAiB,EAAE;IAC7E,IAAI;QACA,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAA6B,CAAC;QAC9F,IAAI,KAAK,EAAE;YACP,MAAM,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SAChC;KACJ;IAAC,OAAO,GAAY,EAAE;QACnB,OAAO,KAAK,WAAW,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;KAC9D;AACL,CAAC,CAAA","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport type { ContextCommand, event, ModalCommand, SlashCommand } from \"../structures/index.js\"\r\nimport type { AutocompleteInteraction, ChatInputCommandInteraction, ContextMenuCommandInteraction, Interaction, ModalSubmitInteraction } from \"discord.js\";\r\n\r\n\r\nexport const name: event['name'] = 'interactionCreate';\r\nexport const once: event[\"once\"] = false\r\n\r\nexport const run: event[\"run\"] = async (interaction: Interaction): Promise<void> => {\r\n    if (interaction.isChatInputCommand() || interaction.isContextMenuCommand()) {\r\n        return void handleCommand(interaction);\r\n    }\r\n    if (interaction.isAutocomplete()) {\r\n        return void handleAutocomplete(interaction);\r\n    }\r\n\r\n    if (interaction.isModalSubmit()) {\r\n        return void handleModal(interaction);\r\n    }\r\n    if(interaction.isButton()){\r\n        console.log(interaction)\r\n    }\r\n};\r\nconst handleCommand = async (interaction: ChatInputCommandInteraction | ContextMenuCommandInteraction): Promise<void> => {\r\n    try {\r\n        if (interaction.isChatInputCommand()) {\r\n            const command = interaction.client.commands.get(interaction.commandName) as SlashCommand | undefined;\r\n            if (command) {\r\n                await command.run(interaction);\r\n            }\r\n        }\r\n        if (interaction.isContextMenuCommand()) {\r\n            const command = interaction.client.commands.get(interaction.commandName) as ContextCommand | undefined;\r\n            if (command) {\r\n                await command.run(interaction);\r\n            }\r\n        }\r\n    } catch (err: unknown) {\r\n        return void interaction.reply(\"Cannot find that command...\");\r\n    }\r\n};\r\n\r\nconst handleAutocomplete = async (interaction: AutocompleteInteraction): Promise<void> => {\r\n    try {\r\n        const command = interaction.client.commands.get(interaction.commandName) as SlashCommand | undefined;\r\n        if (command) {\r\n            await command.run(interaction);\r\n        }\r\n    } catch (err: unknown) {\r\n        return interaction.respond([])\r\n    }\r\n}\r\nconst handleModal = async (interaction: ModalSubmitInteraction): Promise<void> => {\r\n    try {\r\n        const modal = interaction.client.modals.get(interaction.customId) as ModalCommand | undefined;\r\n        if (modal) {\r\n            await modal.run(interaction);\r\n        }\r\n    } catch (err: unknown) {\r\n        return void interaction.reply(\"Cannot find that modal...\");\r\n    }\r\n}\r\n\r\n"]}