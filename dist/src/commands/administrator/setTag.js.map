{"version":3,"file":"setTag.js","sourceRoot":"./src/","sources":["src/commands/administrator/setTag.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { ChatInputCommandInteraction } from \"discord.js\";\r\nimport type { SlashCommand } from \"../../structures/index.js\";\r\nimport { PermissionsBitField, SlashCommandBuilder } from \"discord.js\";\r\nimport { prisma } from '../../index.js';\r\nexport const slashy: SlashCommand[\"slashy\"] = new SlashCommandBuilder()\r\n    .setName(\"settings-tags\").setDescription(\"Settings for tags.\")\r\n    .addStringOption((option) => option.setName(\"actions\").setDescription(\"Choose a action\").setRequired(true)\r\n        .addChoices({ name: \"Create\", value: \"create\" }, { name: \"Delete\", value: \"delete\" }, { name: \"Modify\", value: \"modify\" }, { name: \"ListAll\", value: \"listall\" }).setRequired(true))\r\n    .addStringOption((option) => option.setName(\"name\").setDescription(\"Name for Tag\").setRequired(true))\r\n    .addStringOption((option) => option.setName(\"message\").setDescription(\"message\").setRequired(true))\r\n    .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator)\r\n\r\n\r\nexport const run: SlashCommand[\"run\"] = async (interaction: ChatInputCommandInteraction<\"cached\">): Promise<void> => {\r\n    const choices = interaction.options.getString(\"actions\")!\r\n    const name = interaction.options.getString(\"name\")!;\r\n    const message = interaction.options.getString(\"message\")!;\r\n    const guild_db = prisma.tags\r\n    switch (choices) {\r\n        case \"create\": {\r\n            await guild_db.create({\r\n                data: {\r\n                    \"guildID\": interaction.guild.id,\r\n                    \"name\": name,\r\n                    \"description\": message,\r\n                    \"username\": interaction.user.username\r\n                }\r\n            }\r\n            )\r\n            interaction.reply(`Successfully created a tag with ${name}`)\r\n        }\r\n            break;\r\n        case \"delete\": {\r\n            await guild_db.delete({ where: { name: name } })\r\n            interaction.reply(`Successfully deleted a tag with ${name}`)\r\n        }\r\n            break;\r\n        case \"modify\": {\r\n            await guild_db.update({\r\n                where: { name: name },\r\n                data: {\r\n                    \"name\": name,\r\n                    \"description\": message\r\n                }\r\n            })\r\n            interaction.reply(`Successfully modified a tag with ${name}`)\r\n        }\r\n            break;\r\n        case \"listall\": {\r\n            const maptag = guild_db.findMany({ select: { name: true } })\r\n            console.log(maptag)\r\n            interaction.reply(`there is a list of all tags.`)\r\n        }\r\n            break;\r\n    }\r\n}\r\n"]}